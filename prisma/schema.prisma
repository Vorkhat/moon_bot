datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  tgUserId BigInt @unique

  tgUserName String?

  name String @default("")

  points Float @default(0)

  pointsFarmed Float @default(0)

  invitesLeft          Int @default(5)
  acceptedInvitesCount Int @default(0)

  languageCode String @default("en")

  // whom i invited
  referrals Referral[] @relation("inviter")

  // who invited me
  referralInviter Referral? @relation("invited")

  rewardUsers RewardUser[]
  farmings    Farming[]

  tasks        UserTask[]
  boostFarming BoostFarming[]

  tonWalletAddress String?

  userShuttles UserShuttle[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TonTransactions TonTransactions[]

  @@unique([tonWalletAddress])
  @@index([tgUserId])
  @@index([tgUserName])
  @@index([name])
  @@index([points])
  @@index([pointsFarmed])
  @@index([acceptedInvitesCount])
}

// REWARDS

enum RewardKind {
  REFERRAL // привлек реферала
  REFERRAL_2ND_LEVEL // привлек реферала 2го уровня (реферал привлек ещё реферала)
  REFERRAL_TASK // награда за выполнение рефералом заданий
  FARMING // награда за фарминг
}

model Reward {
  id Int @id @default(autoincrement())

  kind   RewardKind @unique
  points Float? // default reward for reward kind. can be not used for some rewards (tasks)

  rewardUsers RewardUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([kind])
}

model RewardUser {
  id Int @id @default(autoincrement())

  rewardId Int
  reward   Reward @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  points Float @default(0) // custom points

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, rewardId])
}

// REFERRAL

model Referral {
  id Int @id @default(autoincrement())

  // who invited me
  inviterId Int
  inviter   User @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade)

  // user who was invited
  invitedId Int  @unique
  invited   User @relation("invited", fields: [invitedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([inviterId, invitedId])
  @@index([invitedId])
  @@index([inviterId])
}

// FARMING

model Farming {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // pointsFarmed Float @default(0) // how many points farmed before update startedAt
  pointsReward Float    @default(1) // points per sec
  startedAt    DateTime @default(now())
  endsAt       DateTime
  isClaimed    Boolean  @default(false)

  boostFarmings BoostFarming[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userId, isClaimed])
  @@index([userId, isClaimed, endsAt])
}

// Boosts

enum BoostKind {
  NFT
  AD_VIDEO
  SPEED_UP_X2
}

model Boost {
  id Int @id @default(autoincrement())

  kind BoostKind

  isActive            Boolean  @default(true)
  clientName          Json?
  isBot               Boolean  @default(false)
  tgChannelOrChatName Json?
  url                 Json?
  multiplier          Float    @default(2)
  activationsLeft     Int      @default(0)
  activationsCount    Int      @default(0)
  priority            Int      @default(1)
  targetLanguages     String[] @default([])

  boostFarmings BoostFarming[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([priority])
  @@index([createdAt])
  @@index([isActive])
  @@index([activationsLeft])
}

model BoostFarming {
  id Int @id @default(autoincrement())

  startedAt  DateTime
  endsAt     DateTime
  multiplier Float // duplicates in case admin changes multiplier in Boost - we need to save prev value

  boostId Int
  boost   Boost @relation(fields: [boostId], references: [id], onDelete: Cascade)

  farmingId Int
  farming   Farming @relation(fields: [farmingId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boostId, farmingId])
  @@unique([userId, boostId])
  @@index([userId])
  @@index([boostId])
}

// TASKS

enum TaskKind {
  VISIT_LINK
  SUBSCRIBE_TG_CHANNEL
  SUBSCRIBE_TG_CHAT
  BOOST_TG_CHANNEL
  FARMING
  INVITE_REFERRAL
  PUBLISH_TG_STORY
  TON_TRANSACTION
}

model Task {
  id Int @id @default(autoincrement())

  kind     TaskKind
  name     Json?
  isActive Boolean  @default(false)

  description Json?

  // for kind VISIT_LINK
  url                  Json?
  completionTimeoutSec Int?

  tgChannelOrChatName Json?

  farmedPointsForReward   Int? // for kind FARMING
  referralsCountForReward Int? // for kind INVITE_REFERRAL

  pointsReward Float
  priority     Int   @default(1)

  userTasks UserTask[]

  tonTransactionAmount String? // for kind TON_TRANSACTION

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([isActive])
  @@index([priority])
}

enum TaskState {
  STARTED
  COMPLETED
  CLAIMED
}

model UserTask {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  state TaskState @default(STARTED)

  tonTransaction Json? // { address, amount, comment }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, taskId], name: "userId_taskId")
  @@index([userId, taskId, state])
}

enum ShuttleKind {
  MOON
  PARTNER
}

model Shuttle {
  id Int @id @default(autoincrement())

  kind                 ShuttleKind @default(PARTNER)
  name                 Json
  pointsReward         Float       @default(0)
  rewardDurationSec    Int
  nftCollectionUrl     String
  nftCollectionAddress String
  imageUrl             String
  priority             Int         @default(1)

  userShuttles UserShuttle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([nftCollectionUrl])
  @@unique([nftCollectionAddress])
}

model UserShuttle {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  shuttleId Int
  shuttle   Shuttle @relation(fields: [shuttleId], references: [id], onDelete: Cascade)

  nftItemsOwnedCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, shuttleId])
}

model Broadcast {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  text      String
  createdAt DateTime  @default(now())
  startAt   DateTime?
  endedAt   DateTime?
}

model TonTransactions {
  id        Int      @id @default(autoincrement())
  eventId   String   @unique @db.VarChar(100)
  status    Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  createdAt DateTime @default(now())
}
